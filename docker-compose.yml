version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: smart_attendance
      POSTGRES_USER: attendance_user
      POSTGRES_PASSWORD: secure_password_123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U attendance_user -d smart_attendance"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - attendance-network

  # Backend API Server
  backend:
    build: ./backend
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: attendance_user
      DB_PASSWORD: secure_password_123
      DB_DATABASE: smart_attendance
      JWT_SECRET: your_super_secure_jwt_secret_key_change_in_production
      FRONTEND_URL: http://localhost:3001
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - attendance-network

  # Frontend Web Application
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3001:80"
    environment:
      REACT_APP_API_URL: http://localhost:3000/api
      REACT_APP_WS_URL: ws://localhost:3000
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - attendance-network

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - attendance-network

volumes:
  postgres_data:
    driver: local

networks:
  attendance-network:
    driver: bridge